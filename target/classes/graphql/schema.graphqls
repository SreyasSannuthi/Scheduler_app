type Doctor {
    id: ID!
    name: String!
    email: String!
    role: String!
    startDate: String
    endDate: String
    isActive: Boolean
}

type Patient {
    id: ID!
    name: String!
    email: String!
    phoneNumber: String!
    age: Int!
    role: String!
    isActive: Boolean
}

type Appointment {
    id: ID!
    title: String!
    description: String
    doctorId: String!
    patientId: String!
    doctorName: String!
    patientName: String!
    startTime: String!
    endTime: String!
    createdAt: String!
    updatedAt: String!
    status: String!
    duration: String!
    branchId: String
    branchLocation: String
}

type HospitalBranch {
    id: ID!
    branchCode: String!
    address: String!
    city: String!
    state: String!
    zipCode: String
    email: String
    phoneNumber: String!
    isActive: Boolean!
    startedAt: String
}

type DoctorBranchMapping {
    id: ID!
    doctorId: String!
    branchId: String!
    doctorName: String!
    branchCode: String!
}

type AuthResponse {
    token: String
    username: String
    role: String
    message: String!
}

type SignupResponse {
    message: String!
    success: Boolean!
    userId: String
    email: String
    role: String
}

type ActivityLogResponseDTO {
    id: ID
    entityType: String
    entityId: String
    actionType: String
    description: String
    performedBy: String
    performedByName: String
    timestamp: String
    state: String
    relatedEntities: String
    impactSummary: String
    staffRole: String
    staffName: String
    branchCode: String
    branchLocation: String
}


input AppointmentInput {
    title: String!
    description: String
    doctorId: String!
    patientId: String!
    startTime: String!
    endTime: String!
    status: String
    branchId: String
}

input AppointmentUpdateInput {
    title: String
    description: String
    startTime: String
    endTime: String
    status: String
    branchId: String
}

input DoctorSignupInput {
    name: String!
    email: String!
    password: String!
    confirmPassword: String!
}

input DoctorUpdateInput {
    name: String
    email: String
    role: String
    isActive: Boolean
}

input PatientUpdateInput {
    name: String
    email: String
    phoneNumber: String
    age: Int
    isActive: Boolean
}

input PatientSignupInput {
    name: String!
    email: String!
    password: String!
    confirmPassword: String!
    phoneNumber: String!
    age: Int!
}

input HospitalBranchInput {
    branchCode: String!
    address: String!
    city: String!
    state: String!
    zipCode: String
    email: String
    phoneNumber: String!
}

input HospitalBranchUpdateInput {
    branchCode: String
    address: String
    city: String
    state: String
    zipCode: String
    email: String
    phoneNumber: String
    isActive: Boolean
}

input DoctorBranchMappingInput {
    doctorId: String!
    branchId: String!
    doctorName: String!
    branchCode: String!
}

type PatientMedicalRecord {
    id: ID!
    patientId: ID!
    createdAt: String!
    updatedAt: String!
    visitHistory: [VisitHistory!]!
    personalInfo: PersonalMedicalInfo
    medicalDocuments: [MedicalDocument!]!
    analytics: HealthAnalytics
}

type VisitHistory {
    appointmentId: ID!
    visitDate: String!
    doctorName: String!
    branchLocation: String
    reasonForVisit: String
    symptoms: String
    bloodPressure: String
    temperature: Float
    weight: Float
    diagnosis: String
    treatment: String
    medications: String
    doctorNotes: String
    followUpRequired: Boolean
    followUpDate: String
    visitDuration: String
}

type PersonalMedicalInfo {
    bloodType: String
    height: Float
    weight: Float
    lastWeightUpdate: String
    allergies: [String!]!
    chronicConditions: [String!]!
    currentMedications: [String!]!
    emergencyContactName: String
    emergencyContactPhone: String
}

type MedicalDocument {
    documentId: ID!
    fileName: String!
    filePath: String!
    fileSize: Int!
    uploadDate: String!
    uploadedBy: ID!
    description: String
}

type WeightEntry {
    date: String!
    weight: Float!
}

type HealthAnalytics {
    totalVisits: Int!
    lastVisitDate: String
    commonDiagnoses: [String!]!
    weightHistory: [WeightEntry!]!
    missedAppointments: Int!
    averageVisitsPerMonth: Float
    lastAnalyticsUpdate: String
}

input PersonalMedicalInfoInput {
    bloodType: String
    height: Float
    weight: Float
    allergies: [String!]!
    chronicConditions: [String!]!
    currentMedications: [String!]!
    emergencyContactName: String
    emergencyContactPhone: String
}

input VisitHistoryInput {
    appointmentId: ID!
    visitDate: String!
    doctorName: String!
    branchLocation: String
    reasonForVisit: String
    symptoms: String
    bloodPressure: String
    temperature: Float
    weight: Float
    diagnosis: String
    treatment: String
    medications: String
    doctorNotes: String
    followUpRequired: Boolean
    followUpDate: String
    visitDuration: String
}

input MedicalDocumentInput {
    fileName: String!
    description: String
    fileContentBase64: String!
    fileSize: Int!
    mimeType: String!
}

type Query {
    getCurrentUser: String
    getCurrentUserRole: String

    doctors: [Doctor!]!
    doctor(id: ID!): Doctor
    doctorsByRole(role: String!): [Doctor!]!

    patients: [Patient!]!
    patient(id: ID!): Patient
    patientsByRole(role: String!): [Patient!]!

    appointments(requesterId: ID!): [Appointment!]!
    appointmentsByDoctor(doctorId: ID!): [Appointment!]!
    appointmentsByPatient(patientId: ID!): [Appointment!]!
    appointmentById(id: ID!, requesterId: ID!): Appointment

    appointmentsByDateRange(requesterId: ID!, startDate: String!, endDate: String!): [Appointment!]!
    appointmentsByDoctorAndDateRange(doctorId: ID!, startDate: String!, endDate: String!): [Appointment!]!
    appointmentsByPatientAndDateRange(patientId: ID!, startDate: String!, endDate: String!): [Appointment!]!

    appointmentsByStatus(status: String!, requesterId: ID!): [Appointment!]!
    checkCollision(doctorId: ID!, patientId: ID!, startTime: String!, endTime: String!): [Appointment!]!

    hospitalBranches: [HospitalBranch!]!
    activeBranches: [HospitalBranch!]!
    hospitalBranch(id: ID!): HospitalBranch

    doctorBranchMappings: [DoctorBranchMapping!]!
    doctorBranches(doctorId: ID!): [DoctorBranchMapping!]!
    branchDoctors(branchId: ID!): [DoctorBranchMapping!]!

    appointmentsByBranch(branchId: ID!, requesterId: ID!): [Appointment!]!
    appointmentsByBranchAndDateRange(branchId: ID!, requesterId: ID!, startDate: String!, endDate: String!): [Appointment!]!
    appointmentsByBranchAndStatus(branchId: ID!, status: String!, requesterId: ID!): [Appointment!]!

    receptionistsByBranch(branchId: ID!): [Doctor!]!

    getActivityLogsById(entityType: String, entityId: String): [ActivityLogResponseDTO!]
    getActivityLogsByType(entityType: String!): [ActivityLogResponseDTO!]
    getActivityLogs: [ActivityLogResponseDTO!]

    getPatientMedicalRecord(patientId: ID!): PatientMedicalRecord
    getPatientHistory(patientId: ID!): [VisitHistory!]!
    getPatientAnalytics(patientId: ID!): HealthAnalytics
    getPatientPersonalInfo(patientId: ID!): PersonalMedicalInfo

}

type Mutation {
    login(email: String!, password: String!): AuthResponse!
    logout: Boolean!

    signupDoctor(input: DoctorSignupInput!): SignupResponse!
    signupPatient(input: PatientSignupInput!): SignupResponse!

    deleteDoctor(id: ID!): Boolean!
    updateDoctor(id: ID!, input: DoctorUpdateInput!): Doctor!

    deletePatient(id: ID!): Boolean!
    updatePatient(id: ID!, input: PatientUpdateInput!): Patient!

    createAppointment(input: AppointmentInput!): Appointment!
    updateAppointment(id: ID!, input: AppointmentUpdateInput!, requesterId: ID!): Appointment!
    deleteAppointment(id: ID!, requesterId: ID!): Boolean!
    deleteMultipleAppointments(ids: [ID!]!, requesterId: ID!): Boolean!

    createHospitalBranch(input: HospitalBranchInput!): HospitalBranch!
    updateHospitalBranch(id: ID!, input: HospitalBranchUpdateInput!): HospitalBranch!
    deleteHospitalBranch(id: ID!): Boolean!

    assignDoctorToBranch(input: DoctorBranchMappingInput!): DoctorBranchMapping!
    removeDoctorFromBranch(doctorId: ID!, branchId: ID!): Boolean!

    updatePersonalInfo(patientId: ID!, input: PersonalMedicalInfoInput!): PersonalMedicalInfo!
    addVisitHistory(patientId: ID!, input: VisitHistoryInput!): PatientMedicalRecord!
    uploadDocument(patientId: ID!, input: MedicalDocumentInput!): MedicalDocument!

}