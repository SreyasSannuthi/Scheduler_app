type User{
    id: ID!
    name: String!
    email: String!
    role: String!
    isActive: Boolean!
}

type Appointment {
    id: ID!
    title: String!
    description: String
    userId: String!
    startTime: String!
    endTime: String!
    status: String!
    category: String!
}

input AppointmentInput {
    title: String!
    description: String
    userId: String!
    startTime: String!
    endTime: String!
    status: String
    category: String
}

input AppointmentUpdateInput {
    title: String
    description: String
    startTime: String
    endTime: String
    status: String
    category: String
}

type Query {

    users: [User!]!
    user(id: ID!): User

    appointments: [Appointment!]!
    appointmentsByUser(userId: ID!): [Appointment!]!
    appointmentsByDateRange(startDate: String!, endDate: String!): [Appointment!]!
    appointmentsByUserAndDateRange(userId: ID!, startDate: String!, endDate: String!): [Appointment!]!
    appointmentById(id: ID!): Appointment
    appointmentsByCategory(category: String!): [Appointment!]!
    appointmentsByStatus(status: String!): [Appointment!]!
    checkCollision(userId: ID!, startTime: String!, endTime: String!): [Appointment!]!
}

type Mutation {
    createAppointment(input: AppointmentInput!): Appointment!
    updateAppointment(id: ID!, input: AppointmentUpdateInput!): Appointment!
    deleteAppointment(id: ID!): Boolean!
    deleteMultipleAppointments(ids: [ID!]!): Boolean!
}