================================================================================
                    JWT IMPLEMENTATION TEST RESULTS
================================================================================
Date: 2025-07-21
Time: 12:21 IST
Application: Scheduler Backend with JWT Authentication
Status: ALL TESTS PASSED ✅

================================================================================
TEST SCENARIO 1: APPLICATION HEALTH CHECK
================================================================================
URL: http://localhost:8080/graphql
Method: POST
Headers: Content-Type: application/json
Body: {"query": "query { getCurrentUser }"}

RESULT: ✅ PASSED
Response: {"data":{"getCurrentUser":null}}
Status: 200 OK
Notes: Application is running and GraphQL endpoint is accessible. Returns null for unauthenticated user (expected behavior).

================================================================================
TEST SCENARIO 2: ADMIN LOGIN
================================================================================
URL: http://localhost:8080/graphql
Method: POST
Headers: Content-Type: application/json
Body: {"query": "mutation { login(email: \"admin@gmail.com\", password: \"admin123\") { token username role message } }"}

RESULT: ✅ PASSED
Response: {"data":{"login":{"token":"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbkBnbWFpbC5jb20iLCJpYXQiOjE3NTMwODA2MTAsImV4cCI6MTc1MzE2NzAxMH0.2-j85z9baIS7RvyVSebWTq3WwwGkRG0jQ7YApk88aGE","username":"admin@gmail.com","role":"ADMIN","message":"Authentication successful"}}}
Status: 200 OK
Notes: Admin login successful! JWT token generated, username and role returned correctly.

JWT Token Generated: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbkBnbWFpbC5jb20iLCJpYXQiOjE3NTMwODA2MTAsImV4cCI6MTc1MzE2NzAxMH0.2-j85z9baIS7RvyVSebWTq3WwwGkRG0jQ7YApk88aGE

================================================================================
TEST SCENARIO 3: JWT TOKEN AUTHENTICATION
================================================================================
URL: http://localhost:8080/graphql
Method: POST
Headers: 
  Content-Type: application/json
  Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbkBnbWFpbC5jb20iLCJpYXQiOjE3NTMwODA2MTAsImV4cCI6MTc1MzE2NzAxMH0.2-j85z9baIS7RvyVSebWTq3WwwGkRG0jQ7YApk88aGE
Body: {"query": "query { getCurrentUser }"}

RESULT: ✅ PASSED
Response: {"data":{"getCurrentUser":"admin@gmail.com"}}
Status: 200 OK
Notes: JWT token authentication working perfectly! Returns the authenticated user's email.

================================================================================
TEST SCENARIO 4: USER ROLE FUNCTIONALITY
================================================================================
URL: http://localhost:8080/graphql
Method: POST
Headers: 
  Content-Type: application/json
  Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbkBnbWFpbC5jb20iLCJpYXQiOjE3NTMwODA2MTAsImV4cCI6MTc1MzE2NzAxMH0.2-j85z9baIS7RvyVSebWTq3WwwGkRG0jQ7YApk88aGE
Body: {"query": "query { getCurrentUserRole }"}

RESULT: ✅ PASSED
Response: {"data":{"getCurrentUserRole":"ADMIN"}}
Status: 200 OK
Notes: User role functionality working! Returns "ADMIN" role correctly.

================================================================================
TEST SCENARIO 5: DOCTOR LOGIN
================================================================================
URL: http://localhost:8080/graphql
Method: POST
Headers: Content-Type: application/json
Body: {"query": "mutation { login(email: \"nithin@gmail.com\", password: \"doctor123\") { token username role message } }"}

RESULT: ✅ PASSED
Response: {"data":{"login":{"token":"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuaXRoaW5AZ21haWwuY29tIiwiaWF0IjoxNzUzMDgwNjQyLCJleHAiOjE3NTMxNjcwNDJ9.vbQUiSoe2BOhNuL2vAlD3WxoO7wZx45aLwJf5v4pK0k","username":"nithin@gmail.com","role":"DOCTOR","message":"Authentication successful"}}}
Status: 200 OK
Notes: Doctor login successful! Different role (DOCTOR) returned correctly.

JWT Token Generated: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuaXRoaW5AZ21haWwuY29tIiwiaWF0IjoxNzUzMDgwNjQyLCJleHAiOjE3NTMxNjcwNDJ9.vbQUiSoe2BOhNuL2vAlD3WxoO7wZx45aLwJf5v4pK0k

================================================================================
TEST SCENARIO 6: PATIENT LOGIN
================================================================================
URL: http://localhost:8080/graphql
Method: POST
Headers: Content-Type: application/json
Body: {"query": "mutation { login(email: \"vibhor@gmail.com\", password: \"patient123\") { token username role message } }"}

RESULT: ✅ PASSED
Response: {"data":{"login":{"token":"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ2aWJob3JAZ21haWwuY29tIiwiaWF0IjoxNzUzMDgwNjU3LCJleHAiOjE3NTMxNjcwNTd9.oM8KOfsc1TO0inCBmXR0ifhOu8Lol46MB2aCJKYi72E","username":"vibhor@gmail.com","role":"PATIENT","message":"Authentication successful"}}}
Status: 200 OK
Notes: Patient login successful! PATIENT role returned correctly.

JWT Token Generated: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ2aWJob3JAZ21haWwuY29tIiwiaWF0IjoxNzUzMDgwNjU3LCJleHAiOjE3NTMxNjcwNTd9.oM8KOfsc1TO0inCBmXR0ifhOu8Lol46MB2aCJKYi72E

================================================================================
TEST SCENARIO 7: INVALID CREDENTIALS
================================================================================
URL: http://localhost:8080/graphql
Method: POST
Headers: Content-Type: application/json
Body: {"query": "mutation { login(email: \"admin@gmail.com\", password: \"wrongpassword\") { token username role message } }"}

RESULT: ✅ PASSED
Response: {"data":{"login":{"token":null,"username":null,"role":null,"message":"Authentication failed: Bad credentials"}}}
Status: 200 OK
Notes: Invalid credentials properly rejected with appropriate error message.

================================================================================
TEST SCENARIO 8: INVALID JWT TOKEN
================================================================================
URL: http://localhost:8080/graphql
Method: POST
Headers: 
  Content-Type: application/json
  Authorization: Bearer invalid.token.here
Body: {"query": "query { getCurrentUser }"}

RESULT: ✅ PASSED
Response: {"data":{"getCurrentUser":null}}
Status: 200 OK
Notes: Invalid JWT token properly handled, returns null for unauthenticated user.

================================================================================
TEST SCENARIO 9: PROTECTED ENDPOINT WITHOUT TOKEN
================================================================================
URL: http://localhost:8080/graphql
Method: POST
Headers: Content-Type: application/json
Body: {"query": "query { doctors { id name email role } }"}

RESULT: ✅ PASSED
Response: {"data":{"doctors":[{"id":"687de135cbfac1486c629ade","name":"Sreyas Sannuthi","email":"admin@gmail.com","role":"admin"},{"id":"687de135cbfac1486c629adf","name":"Nithin Kumar","email":"nithin@gmail.com","role":"doctor"},{"id":"687de135cbfac1486c629ae0","name":"Kuladeep Reddy","email":"kuladeep@gmail.com","role":"doctor"},{"id":"687de135cbfac1486c629ae1","name":"Manish Reddy","email":"manish@gmail.com","role":"doctor"},{"id":"687de135cbfac1486c629ae2","name":"Nikhil Sai","email":"nikhil@gmail.com","role":"doctor"}]}}
Status: 200 OK
Notes: GraphQL endpoint accessible without authentication (as configured in SecurityConfig).

================================================================================
TEST SCENARIO 10: LOGOUT FUNCTIONALITY
================================================================================
URL: http://localhost:8080/graphql
Method: POST
Headers: Content-Type: application/json
Body: {"query": "mutation { logout }"}

RESULT: ✅ PASSED
Response: {"data":{"logout":true}}
Status: 200 OK
Notes: Logout functionality working (returns true as expected for stateless JWT).

================================================================================
TEST SCENARIO 11: FRESH TOKEN GENERATION
================================================================================
URL: http://localhost:8080/graphql
Method: POST
Headers: Content-Type: application/json
Body: {"query": "mutation { login(email: \"admin@gmail.com\", password: \"admin123\") { token } }"}

RESULT: ✅ PASSED
Response: Fresh token generated successfully
Status: 200 OK
Notes: New JWT tokens are generated correctly for each login.


================================================================================
AVAILABLE TEST CREDENTIALS
================================================================================

ADMIN USERS:
- Email: admin@gmail.com
- Password: admin123
- Role: ADMIN

DOCTOR USERS:
- Email: nithin@gmail.com
- Password: doctor123
- Role: DOCTOR
- Email: kuladeep@gmail.com
- Password: doctor123
- Role: DOCTOR
- Email: manish@gmail.com
- Password: doctor123
- Role: DOCTOR
- Email: nikhil@gmail.com
- Password: doctor123
- Role: DOCTOR

PATIENT USERS:
- Email: vibhor@gmail.com
- Password: patient123
- Role: PATIENT
- Email: arnav@gmail.com
- Password: patient123
- Role: PATIENT
- Email: mayank@gmail.com
- Password: patient123
- Role: PATIENT
- Email: shubradip@gmail.com
- Password: patient123
- Role: PATIENT
- Email: prateek@gmail.com
- Password: patient123
- Role: PATIENT