type Doctor {
    id: ID!
    name: String!
    email: String!
    role: String!
}

type Patient {
    id: ID!
    name: String!
    email: String!
    phoneNumber: String!
    age: Int!
    role: String!
}

input DoctorSignupInput {
    name: String!
    email: String!
    password: String!
    confirmPassword: String!
}

input PatientSignupInput {
    name: String!
    email: String!
    password: String!
    confirmPassword: String!
    phoneNumber: String!
    age: Int!
}

type Appointment {
    id: ID!
    title: String!
    description: String
    doctorId: String!
    patientId: String!
    doctorName: String!
    patientName: String!
    startTime: String!
    endTime: String!
    createdAt: String!
    updatedAt: String!
    status: String!
    duration: String!
}

type SignupResponse {
    message: String!
    success: Boolean!
    userId: String
    email: String
    role: String
}

type AuthResponse {
    token: String
    username: String
    role: String
    message: String!
}

input AppointmentInput {
    title: String!
    description: String
    doctorId: String!
    patientId: String!
    startTime: String!
    endTime: String!
    status: String
}

input AppointmentUpdateInput {
    title: String
    description: String
    startTime: String
    endTime: String
    status: String
}

type Query {

    getCurrentUser: String
    getCurrentUserRole: String

    doctors: [Doctor!]!
    doctor(id: ID!): Doctor
    doctorsByRole(role: String!): [Doctor!]!

    patients: [Patient!]!
    patient(id: ID!): Patient
    patientsByRole(role: String!): [Patient!]!

    appointments(adminId: ID!): [Appointment!]!
    appointmentsByDoctor(doctorId: ID!): [Appointment!]!
    appointmentsByPatient(patientId: ID!): [Appointment!]!
    appointmentById(id: ID!, requesterId: ID!): Appointment

    appointmentsByDateRange(adminId: ID!, startDate: String!, endDate: String!): [Appointment!]!
    appointmentsByDoctorAndDateRange(doctorId: ID!, startDate: String!, endDate: String!): [Appointment!]!
    appointmentsByPatientAndDateRange(patientId: ID!, startDate: String!, endDate: String!): [Appointment!]!

    appointmentsByStatus(status: String!, requesterId: ID!): [Appointment!]!
    checkCollision(doctorId: ID!, patientId: ID!, startTime: String!, endTime: String!): [Appointment!]!
}

type Mutation {

    login(email: String!, password: String!): AuthResponse!
    logout: Boolean!

    createAppointment(input: AppointmentInput!): Appointment!
    updateAppointment(id: ID!, input: AppointmentUpdateInput!, requesterId: ID!): Appointment!
    deleteAppointment(id: ID!, requesterId: ID!): Boolean!
    deleteMultipleAppointments(ids: [ID!]!, requesterId: ID!): Boolean!

    signupDoctor(input: DoctorSignupInput!): SignupResponse!
    signupPatient(input: PatientSignupInput!): SignupResponse!
}